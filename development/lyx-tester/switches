
# these functions are useful for switching between dev versions
# and stable versions of certain components.

# running a function when the state is already the version
# the function switches to should be a no-op (with a diagnostic
# message)



# where to archive the TL version
_polyglossia_dev_d="/home/$(logname)/polyglossia"


_tl_stable_bu_d="/home/$(logname)/tl-stable-binaries"
_tl_texbin_d="/opt/texbin/"


# these functions are basically used as constants, but implemented as functions
# to avoid expensive calculation every time a bash session is started.
#
function _poly-tl-d ()
{
  # location of TL version
  /opt/texbin/kpsewhich polyglossia.sty | xargs dirname
}
#
#
function _poly-tl-bu-d ()
{
  # e.g., "TL25_2025-03-16"
  _tl_dirname="$( basename "$( dirname "$( kpsewhich -var-value TEXMFDIST )")")"
  # this is the dir outside of the TL tree where we store the TL polyglossia
  # dir when we replace it with a symlink to the dev dir.
  echo "/home/$(logname)/polyglossia_tl/${_tl_dirname}"
}


function switch-polyglossia-to-dev ()
{

  # Udi pointed out a potential problem:
  #
  #   Note that for example you don't watch the files from polyglossia installed in
  #   "fonts/misc/xetex/fontmapping/polyglossia/"
  #   but they rarely get updated.
  #
  # todo: In these functions we could at least check whether those files in the
  #       repo are different so we are notified when we need to update them.


  _polyglossia_tl_d="$(_poly-tl-d)"
  _polyglossia_tl_bu_d="$( _poly-tl-bu-d )"

  # check whether link or not link to see whether current is tl or dev.
  if [ -L "${_polyglossia_tl_d}" ]; then
    echo "Link exists, so you are already using polyglossia-dev."
    return 0
  else

    if [ -e "${_polyglossia_tl_bu_d}" ]; then
      echo "ERROR: The polyglossia backup dir already exists: ${_polyglossia_tl_bu_d}" >&2
      return 1
    fi
    sudo mv "${_polyglossia_tl_d}" "${_polyglossia_tl_bu_d}"
    # We use a link to poly-dev. That is, we do not copy the directory. That
    # way, we can just do a git pull.
    sudo ln -s "${_polyglossia_dev_d}/tex" "${_polyglossia_tl_d}"
    # we need to check for possibly new/removed files
    sudo /opt/texbin/mktexlsr
  fi
}


function switch-polyglossia-to-stable ()
{
  _polyglossia_tl_d="$(_poly-tl-d)"
  _polyglossia_tl_bu_d="$( _poly-tl-bu-d )"

  if [ -L "${_polyglossia_tl_d}" ]; then
    sudo rm "${_polyglossia_tl_d}"
    sudo mv "${_polyglossia_tl_bu_d}" "${_polyglossia_tl_d}"
    sudo /opt/texbin/mktexlsr
  else
    echo "Link does not exist, so you are already using polyglossia-stable."
    return 0
  fi
}


# useful to see what the initial state is to know whether to switch back, e.g.,
# in a script that updates the TeX Live installation.
function polyglossia-is-stable ()
{
  _polyglossia_tl_d="$(_poly-tl-d)"

  if [ -L "${_polyglossia_tl_d}" ]; then
    # 0 = no, not stable
    echo "0"
  else
    # 1 = yes, stable
    echo "1"
  fi
  return 0
}


function switch-latex-to-tl-dev ()
{
  if [ ! -e "${_tl_stable_bu_d}" ]; then
    mkdir "${_tl_stable_bu_d}"
  fi

  # todo: how to find this more generally? could take dir of 'which pdflatex'
  # todo: use the "real" link instead? shouldn't make a difference right?
  # $ readlink -f /opt/texbin
  # /usr/local/texlive/2021/bin/x86_64-linux
  for i in "${_tl_texbin_d}"/*-dev; do
    devname="$( basename "${i}")"
    stablename="${devname%-*}"
    if [ $(cat "${_tl_texbin_d}/${stablename}" | wc -l) = "2" ]; then
      echo "${stablename} already points to dev"
    else
      echo "${stablename} was calling stable."
      sudo mv "${_tl_texbin_d}/${stablename}" "${_tl_stable_bu_d}"
      # todo: confirm this?
      # doesn't work. Maybe pdflatex (or pdftex rather) checks the binary name calling it (?)
      # sudo ln -s "${_tl_texbin_d}/${devname}" "${_tl_texbin_d}/${stablename}"
      echo "#!/usr/bin/bash" | sudo tee "${_tl_texbin_d}/${stablename}" > /dev/null
      # need to escape " and $ but not @.
      echo "/opt/texbin/${devname} \"\$@\"" | sudo tee -a "${_tl_texbin_d}/${stablename}" > /dev/null
      sudo chmod +x "${_tl_texbin_d}/${stablename}"
      echo "  ${stablename} now pointing to dev."
    fi
  done
}


function switch-latex-to-tl-stable ()
{
  for i in "${_tl_texbin_d}"/*-dev; do
    devname="$( basename "${i}")"
    stablename="${devname%-*}"
    # The file should contain just a shebang line and one line if it
    # is pointing to dev. Otherwise should be a link.
    if [ $(cat "${_tl_texbin_d}/${stablename}" | wc -l) = "2" ]; then
      echo "${stablename} was calling dev."
      if [ ! -e "${_tl_stable_bu_d}/${stablename}" ]; then
        echo "  restoring stable."
        sudo rm "${_tl_texbin_d}/${stablename}"
        sudo cp -d "${_tl_stable_bu_d}/${stablename}" "${_tl_texbin_d}/${stablename}"
      else
        echo "ERROR: the stable backup file does not exist: ${_tl_stable_bu_d}/${stablename}"
      fi
    else
      echo "${stablename} is already stable version."
    fi
  done
}


# see also 'update-alternatives-add-new-gcc-and-clang' in 'convenience-functions.sh'
function switch-gcc-to ()
{
  sudo update-alternatives --set gcc "/usr/bin/gcc-$1"
  sudo update-alternatives --set g++ "/usr/bin/g++-$1"
  sudo update-alternatives --set gfortran "/usr/bin/gfortran-$1"
}
_switch_gcc_to()
{
  local cur

  cur=${COMP_WORDS[COMP_CWORD]}

  if [ "$COMP_CWORD" == "1" ]; then
    gcc_vers="$(ls /usr/bin/gcc-* | grep -o -P '(?<=gcc-)\d+(?=$)')"
    COMPREPLY=( $( compgen -W '${gcc_vers}' -- $cur ) )
  fi
}
complete -F _switch_gcc_to ${filenames:-} switch-gcc-to


function switch-clang-to ()
{
  sudo update-alternatives --set clang "/usr/bin/clang-$1"
  sudo update-alternatives --set clang++ "/usr/bin/clang++-$1"
  # I don't think Clang has a (built-in) fortran
}
_switch_clang_to()
{
  local cur

  cur=${COMP_WORDS[COMP_CWORD]}

  if [ "$COMP_CWORD" == "1" ]; then
    clang_vers="$(ls /usr/bin/clang-* | grep -o -P '(?<=clang-)\d+(?=$)')"
    COMPREPLY=( $( compgen -W '${clang_vers}' -- $cur ) )
  fi
}
complete -F _switch_clang_to ${filenames:-} switch-clang-to


function gcc-apt-get-install ()
{
  # todo: completion?

  # approximate size taken up by installing:
  # gcc:      ~423 MB
  # g++:      ~220 MB
  # gfortran: ~200 MB
  #
  sudo apt-get install \
  "gcc-$1" \
  "g++-$1" \
  "gfortran-$1"

  # now register them so that 'switch-gcc-to' works.
  update-alternatives-add-new-gcc-and-clang
}


function clang-apt-get-install ()
{
  # don't need to separately install "clang++-$1".
  # approximate size taken up by installing: # 722 MB
  sudo apt-get install "clang-$1"

  # now register them so that 'switch-clang-to' works.
  update-alternatives-add-new-gcc-and-clang
}
